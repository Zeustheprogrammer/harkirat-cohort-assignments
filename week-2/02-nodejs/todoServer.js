/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const fs = require('fs').promises;
  const path = require('path');
  const bodyParser = require('body-parser');
  const { v4: uuidv4 } = require('uuid');
  
  const app = express();

  app.use(bodyParser.json());

  const filepath = path.resolve('todos.json')

  async function readTodos() {
    try{
      const data =  await fs.readFile(path.resolve('todos.json'),'utf-8');
      return JSON.parse(data)
    } catch(err) {
      return [];
    }
  }

  async function writeTodos(todos) {
    await fs.writeFile(filepath,JSON.stringify(todos,null,2));
  }

  app.get('/todos',async (req,res,next)=> {
    try{
      const todos = await readTodos();
      res.status(200).send(todos);
    } catch(err) {
      next(err);
    }
  })

  app.get('/todos/:id',async (req,res,next)=> {
    try{
      const todos = await readTodos();
      const todo = todos.find((todo)=> todo.id === req.params.id);
      if(!todo) return res.sendStatus(404);
      res.status(200).send(todo);
    } catch(err) {
      next(err);
    }
  })

  app.post('/todos',async (req,res,next)=> {
    try{
      const {title, description} = req.body;
      if(title === undefined || description === undefined ) return res.sendStatus(400);
      const id = uuidv4();
      const todos = await readTodos();
      todos.push({
        id, title, completed:false, description
      });
      await writeTodos(todos);
      res.status(201).json({id});

    } catch(err) {
      next(err);
    }
  })

  app.put('/todos/:id', async(req, res,next) => {
    try{
      const todos = await readTodos()
      const todo = todos.find((todo)=> todo.id === req.params.id);
      if(!todo) return res.sendStatus(404);
      const {title, description, completed} = req.body;
      if(title != undefined) {
        todo.title = title
      }
      if(description != undefined) {
        todo.description = description
      }
      if(completed != undefined) {
        todo.completed =completed
      }
      await writeTodos(todos)
      res.sendStatus(200)

    } catch(err) {
      next(err)
    }
  })

  app.delete('/todos/:id', async(req, res, next) => {
    try{
      const todos = await readTodos();
      const todo = todos.findIndex((todo)=> todo.id === req.params.id);
      if(todo===-1) return res.sendStatus(404);
      todos.splice(todo,1);
      await writeTodos(todos);
      res.sendStatus(200);
    } catch(err) {
      next(err);
    }
  })

  app.use((err, req, res, next)=> {
    if(err) {
      console.error(err);
      res.send(500).json({result: 'Something went wrong'})
    }
  })

  app.use((req,res)=> {
    res.sendStatus(404)
  })
  


  module.exports = app;